name: Deploy Drupal Site to AWS Lightsail Testing

on:
  repository_dispatch:
    types: [deploy-stack]

env:
  DOCKER_IMAGE: "jesstg/drupal-test:latest"
  INSTANCE_IP: ${{ github.event.client_payload.instance_ip }}
  DB_HOST: ${{ github.event.client_payload.db_host }}
  DB_PORT: ${{ github.event.client_payload.db_port }}
  DB_NAME: ${{ github.event.client_payload.db_name }}
  DB_USER: ${{ github.event.client_payload.db_user }}
  DB_PASSWORD: ${{ github.event.client_payload.db_password }}
  AWS_REGION: "us-east-1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

   

      - name: 🔐 Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh  # REQUIRED for SSH to work
          # Use printf to preserve newlines from secrets
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Force-add host key without verification
          ssh-keyscan -H $INSTANCE_IP > ~/.ssh/known_hosts 2>/dev/null
          
          # Connection test with verbose output
          echo "🔄 Testing SSH connection..."
          ssh -vvv -o BatchMode=yes -i ~/.ssh/id_rsa ec2-user@$INSTANCE_IP exit  # Change "ubuntu" to your AMI's default user    

      - name: 🚀 Deploy Drupal Container
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$INSTANCE_IP <<EOF
            echo "🔍 Debugging environment..."
            docker --version
            nc -zv $DB_HOST $DB_PORT || echo "Cannot connect to RDS"
            mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p'$DB_PASSWORD' -e "SHOW DATABASES;" || echo "Failed to connect to database"

            echo "🔧 Mounting disk if not already..."
            if ! mountpoint -q /mnt/drupal-data; then
              sudo mkfs.ext4 /dev/nvme1n1 || echo "Already formatted"
              sudo mkdir -p /mnt/drupal-data/config /mnt/drupal-data/files
              sudo mount /dev/nvme1n1 /mnt/drupal-data
              echo "/dev/nvme1n1 /mnt/drupal-data ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
            fi

            echo "📁 Preparing folders and permissions..."
            sudo mkdir -p /mnt/drupal-data/modules
            sudo mkdir -p /mnt/drupal-data/themes
            sudo mkdir -p /mnt/drupal-data/files/inline-images
            sudo mkdir -p /mnt/drupal-data/config/sync
            sudo chown -R 33:33 /mnt/drupal-data
            sudo chmod -R 775 /mnt/drupal-data

            echo "🧹 Stopping previous container if exists..."
            docker stop drupal || true && docker rm drupal || true

            echo "🐳 Pulling Docker image: $DOCKER_IMAGE..."
            docker pull $DOCKER_IMAGE || { echo "Failed to pull Docker image"; exit 1; }

            echo "🏗️ Running new Drupal container..."
            docker run -d \
              --name drupal \
              -p 80:80 \
              --restart unless-stopped \
              -v /mnt/drupal-data/modules:/var/www/html/web/modules/custom \
              -v /mnt/drupal-data/themes:/var/www/html/web/themes/custom \
              -v /mnt/drupal-data/files:/var/www/html/web/sites/default/files \
              -v /mnt/drupal-data/config:/var/www/html/web/config \
              -e DB_HOST="$DB_HOST" \
              -e DB_PORT="$DB_PORT" \
              -e DB_NAME="$DB_NAME" \
              -e DB_USER="$DB_USER" \
              -e DB_PASSWORD='$DB_PASSWORD' \
              -e AWS_REGION="$AWS_REGION" \
              $DOCKER_IMAGE || { echo "Failed to run Docker container"; exit 1; }

            echo "🔍 Waiting for Drupal to fully initialize..."
            sleep 60

            echo "🔍 Checking container status..."
            docker ps -a
            docker logs drupal || echo "No logs available"

            echo "🔧 Ensuring permissions inside the container..."
            docker exec drupal mkdir -p /var/www/html/web/config/sync
            docker exec drupal chown -R www-data:www-data /var/www/html/web/config
            docker exec drupal chmod -R 775 /var/www/html/web/config
            docker exec drupal chown -R www-data:www-data /var/www/html/web/sites/default/files
            docker exec drupal chmod -R 775 /var/www/html/web/sites/default/files

            echo "🔧 Configuring Drupal to allow image uploads..."
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.status 1 -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.directory inline-images -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.max_size 2097152 -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.extensions "jpg,png,gif" -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web cr

            echo "🔧 Setting image field storage directory..."
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set field.storage.node.field_image file_directory inline-images -y

            echo "✅ Deployment completed!"
          EOF

      - name: 🌐 Output Site URL
        run: |
          echo "✅ Site deployed at: http://$INSTANCE_IP"
          echo "🔐 Admin Login: http://$INSTANCE_IP/user/login"
