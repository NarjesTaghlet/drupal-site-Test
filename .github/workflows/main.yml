name: Deploy Drupal Site
on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username for the Drupal site (e.g., test)'
        required: true
        default: 'test'
env:
  RESOURCE_GROUP: 'drupal-rg-user1-5ad1bbb1'
  STORAGE_ACCOUNT: 'mystor${{ github.event.inputs.username }}2025'
  CONTAINER_NAME: '${{ github.event.inputs.username }}-drupal'
  DB_SERVER: 'drupal-db-user1-5ad1bbb1'
  DB_NAME: 'drupal_${{ github.event.inputs.username }}'
  DB_USER: 'drupaluser_user1'
  DB_PASSWORD: 'xr4u8WSiq3B!TQOL'
  DB_HOST: 'drupal-db-user1-5ad1bbb1.mysql.database.azure.com'
  LOCATION: 'centralus'
  ACR_NAME: 'drupalacrnarjes'
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Azure
        run: |
          az login --use-device-code
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      - name: Create Resource Group
        run: |
          az group create --name $RESOURCE_GROUP --location $LOCATION || echo "Resource group already exists."
      - name: Create Storage Account
        run: |
          az storage account create --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --location $LOCATION --sku Standard_LRS
          until az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --query 'provisioningState' -o tsv | grep -q "Succeeded"; do
            echo "Waiting for storage account $STORAGE_ACCOUNT to be fully provisioned..."
            sleep 10
          done
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query '[0].value' -o tsv)
          echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV
      - name: Create File Shares
        run: |
          for attempt in {1..5}; do
            az storage share create --name "drupal-files-${{ github.event.inputs.username }}" --account-name $STORAGE_ACCOUNT --account-key $STORAGE_KEY --output none
            az storage share create --name "drupal-config-${{ github.event.inputs.username }}" --account-name $STORAGE_ACCOUNT --account-key $STORAGE_KEY --output none
            if az storage share list --account-name $STORAGE_ACCOUNT --account-key $STORAGE_KEY --query "[?name=='drupal-files-${{ github.event.inputs.username }}' || name=='drupal-config-${{ github.event.inputs.username }}'] | length(@)" -o tsv | grep -q "2"; then
              echo "File shares created successfully!"
              break
            fi
            echo "Attempt $attempt failed, retrying in 10 seconds..."
            sleep 10
          done
          if [ $attempt -eq 5 ]; then
            echo "Error: Failed to create file shares after 5 attempts"
            exit 1
          fi
      - name: Create Database
        run: |
          az mysql flexible-server db create \
            --resource-group $RESOURCE_GROUP \
            --server-name $DB_SERVER \
            --database-name $DB_NAME || echo "Database $DB_NAME may already exist."
      - name: Debug ACR Credentials and Image
        run: |
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query 'passwords[0].value' -o tsv)
          echo "ACR Username: $ACR_USERNAME"
          echo "ACR Password: $ACR_PASSWORD"
          echo "Listing repositories in $ACR_NAME:"
          az acr repository list --name $ACR_NAME --output table
          echo "Listing tags for drupal-app:"
          az acr repository show-tags --name $ACR_NAME --repository drupal-app --output table || echo "No tags found for drupal-app"
          echo "Testing ACR login:"
          docker login $ACR_NAME.azurecr.io --username "$ACR_USERNAME" --password "$ACR_PASSWORD" || echo "ACR login failed"
      - name: Deploy ACI
        run: |
          # Générer le fichier YAML temporairement
          cat <<EOF > aci-config.yml
          apiVersion: '2021-10-01'
          location: $LOCATION
          name: $CONTAINER_NAME
          properties:
            osType: Linux
            containers:
            - name: drupal
              properties:
                image: $ACR_NAME.azurecr.io/drupal-app:latest
                ports:
                - port: 80
                  protocol: TCP
                environmentVariables:
                - name: DRUPAL_DB_NAME
                  value: $DB_NAME
                - name: DRUPAL_DB_USER
                  value: $DB_USER
                - name: DRUPAL_DB_PASSWORD
                  value: $DB_PASSWORD
                - name: DRUPAL_DB_HOST
                  value: $DB_HOST
                - name: DRUPAL_DB_PORT
                  value: '3306'
                resources:
                  requests:
                    cpu: 2.0
                    memoryInGB: 4.0
                volumeMounts:
                - name: config-volume
                  mountPath: /var/www/html/config
                - name: files-volume
                  mountPath: /var/www/html/web/sites/default/files
            volumes:
            - name: config-volume
              azureFile:
                shareName: drupal-config-${{ github.event.inputs.username }}
                storageAccountName: $STORAGE_ACCOUNT
                storageAccountKey: $STORAGE_KEY
            - name: files-volume
              azureFile:
                shareName: drupal-files-${{ github.event.inputs.username }}
                storageAccountName: $STORAGE_ACCOUNT
                storageAccountKey: $STORAGE_KEY
            ipAddress:
              type: Public
              ports:
              - protocol: TCP
                port: 80
              dnsNameLabel: $CONTAINER_NAME
            restartPolicy: OnFailure
          type: Microsoft.ContainerInstance/containerGroups
          EOF
          # Afficher le YAML pour vérification
          echo "Generated aci-config.yml:"
          cat aci-config.yml
          # Déployer avec le fichier généré
          az container create \
            --resource-group "$RESOURCE_GROUP" \
            --file aci-config.yml \
            --registry-login-server "$ACR_NAME.azurecr.io" \
            --registry-username "$(az acr credential show --name $ACR_NAME --query username -o tsv)" \
            --registry-password "$(az acr credential show --name $ACR_NAME --query 'passwords[0].value' -o tsv)"
      - name: Check ACI Logs
        run: |
          sleep 60 # Attendre que l'ACI démarre
          az container logs --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME
      - name: Output URL
        run: |
          echo "Site deployed! URL: http://$CONTAINER_NAME.$LOCATION.azurecontainer.io"
          echo "Admin login (after install): http://$CONTAINER_NAME.$LOCATION.azurecontainer.io/user/login (admin/admin)"
