name: Deploy Drupal Site to AWS Lightsail

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Drupal site username (e.g., jess)'
        required: true
        default: 'jess'

env:
  INSTANCE_IP: "3.211.196.38"
  DOCKER_IMAGE: "jesstg/drupal-custom:latest"
  DB_HOST: "ls-fb5cb90efe0fceec734140c8f907aadc57c8313c.c43wcgu6gelw.us-east-1.rds.amazonaws.com"
  DB_PORT: "3306"
  DB_NAME: "db19test"
  DB_USER: "user"
  DB_PASSWORD: '9huJBUHbNe(T$TZu'
  AWS_REGION: "us-east-1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

   

      - name: üîê Setup SSH Key
        run: |
          echo "Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts

      - name: üöÄ Deploy Drupal Container
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$INSTANCE_IP <<EOF
            echo "üîç Debugging environment..."
            echo "Docker version:"
            docker --version
            echo "Checking network connectivity to RDS..."
            nc -zv $DB_HOST $DB_PORT || echo "Cannot connect to RDS"
            echo "Testing database connection manually..."
            mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p'$DB_PASSWORD' -e "SHOW DATABASES;" || echo "Failed to connect to database"

            echo "üîß Mounting disk if not already..."
            if ! mountpoint -q /mnt/drupal-data; then
              sudo mkfs.ext4 /dev/xvdf || echo "Already formatted"
              sudo mkdir -p /mnt/drupal-data/config /mnt/drupal-data/files
              sudo mount /dev/xvdf /mnt/drupal-data
              echo "/dev/xvdf /mnt/drupal-data ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
            fi

            echo "üìÅ Preparing folders and permissions..."
            sudo mkdir -p /mnt/drupal-data/files/inline-images
            sudo mkdir -p /mnt/drupal-data/config/sync
            sudo chown -R 33:33 /mnt/drupal-data
            sudo chmod -R 775 /mnt/drupal-data
            sudo chown -R 33:33 /mnt/drupal-data/files/inline-images
            sudo chmod -R 775 /mnt/drupal-data/files/inline-images
            sudo chown -R 33:33 /mnt/drupal-data/config/sync
            sudo chmod -R 775 /mnt/drupal-data/config/sync

            echo "üîç Verifying directories after setup..."
            ls -ld /mnt/drupal-data
            ls -ld /mnt/drupal-data/files
            ls -ld /mnt/drupal-data/config

            echo "üßπ Stopping previous container if exists..."
            docker stop drupal || true && docker rm drupal || true

            echo "üê≥ Pulling Docker image: $DOCKER_IMAGE..."
            docker pull $DOCKER_IMAGE || { echo "Failed to pull Docker image"; exit 1; }

            echo "üèóÔ∏è Running new Drupal container..."
            docker run -d \
              --name drupal \
              -p 80:80 \
              --restart unless-stopped \
              -v /mnt/drupal-data/files:/var/www/html/sites/default/files \
              -v /mnt/drupal-data/config:/var/www/html/config \
              -e DB_HOST="$DB_HOST" \
              -e DB_PORT="$DB_PORT" \
              -e DB_NAME="$DB_NAME" \
              -e DB_USER="$DB_USER" \
              -e DB_PASSWORD='$DB_PASSWORD' \
              -e AWS_REGION="$AWS_REGION" \
              $DOCKER_IMAGE || { echo "Failed to run Docker container"; exit 1; }

            echo "üîç Waiting for Drupal to fully initialize..."
            sleep 30

            echo "üîç Checking container status..."
            docker ps -a

            echo "üîç Checking container logs..."
            docker logs drupal || echo "No logs available"

            echo "üîç Checking Drupal installation status..."
            RETRY_COUNT=0
            MAX_RETRIES=5
            until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
              DRUSH_STATUS=$(docker exec drupal vendor/bin/drush status --fields=bootstrap --format=string 2>/dev/null)
              if [ "$DRUSH_STATUS" = "Successful" ]; then
                echo "Drupal is fully installed and ready!"
                break
              fi
              echo "Drupal not ready yet, retrying in 10 seconds... (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "Error: Drupal failed to initialize after $MAX_RETRIES attempts."
              exit 1
            fi

            echo "üîß Configuring Drupal to allow image uploads..."
            docker exec drupal vendor/bin/drush config-set filter.format.basic_html editor.image_upload.status 1 -y || echo "Failed to set image upload status"
            docker exec drupal vendor/bin/drush config-set filter.format.basic_html editor.image_upload.directory inline-images -y || echo "Failed to set image upload directory"
            docker exec drupal vendor/bin/drush config-set filter.format.basic_html editor.image_upload.max_size 2097152 -y || echo "Failed to set image upload max size"
            docker exec drupal vendor/bin/drush config-set filter.format.basic_html editor.image_upload.extensions "jpg,png,gif" -y || echo "Failed to set image upload extensions"
            docker exec drupal vendor/bin/drush cr || echo "Failed to clear cache"

            echo "üîç Verifying image upload configuration..."
            docker exec drupal vendor/bin/drush config-get filter.format.basic_html || echo "Failed to get image upload configuration"

            echo "‚úÖ Deployment completed!"
          EOF

      - name: üåê Output Site URL
        run: |
          echo "‚úÖ Site deployed at: http://$INSTANCE_IP"
          echo "üîê Admin Login: http://$INSTANCE_IP/user/login"
