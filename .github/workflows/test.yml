name: Deploy Drupal Site to AWS Lightsail

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Drupal site username (e.g., jess)'
        required: true
        default: 'jess'

env:
  INSTANCE_IP: "3.232.84.59"
  #DOCKER_IMAGE: "jesstg/drupal-custom:latest"
  #DOCKER_IMAGE: "jesstg/drupal-site:latest"
  DOCKER_IMAGE: "jesstg/drupal-test:latest"
  DB_HOST: "ls-3f45b72157ba66d3d5060e529dc58c6aa1cc0dba.c43wcgu6gelw.us-east-1.rds.amazonaws.com"
  DB_PORT: "3306"
  DB_NAME: "db19test"
  DB_USER: "user"
  DB_PASSWORD: 't)x(hRUXfNLh_hqm'
  AWS_REGION: "us-east-1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üîê Setup SSH Key
        run: |
          echo "Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts

      - name: üöÄ Deploy Drupal Container
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$INSTANCE_IP <<EOF
            echo "üîç Debugging environment..."
            docker --version
            nc -zv $DB_HOST $DB_PORT || echo "Cannot connect to RDS"
            mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p'$DB_PASSWORD' -e "SHOW DATABASES;" || echo "Failed to connect to database"

            echo "üîß Mounting disk if not already..."
            if ! mountpoint -q /mnt/drupal-data; then
              sudo mkfs.ext4 /dev/nvme1n1 || echo "Already formatted"
              sudo mkdir -p /mnt/drupal-data/config /mnt/drupal-data/files
              sudo mount /dev/nvme1n1 /mnt/drupal-data
              echo "/dev/nvme1n1 /mnt/drupal-data ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
            fi

            echo "üìÅ Preparing folders and permissions..."
            sudo mkdir -p /mnt/drupal-data/modules
            sudo mkdir -p /mnt/drupal-data/themes
            sudo mkdir -p /mnt/drupal-data/files/inline-images
            sudo mkdir -p /mnt/drupal-data/config/sync
            sudo chown -R 33:33 /mnt/drupal-data
            sudo chmod -R 775 /mnt/drupal-data

            echo "üßπ Stopping previous container if exists..."
            docker stop drupal || true && docker rm drupal || true

            echo "üê≥ Pulling Docker image: $DOCKER_IMAGE..."
            docker pull $DOCKER_IMAGE || { echo "Failed to pull Docker image"; exit 1; }

            echo "üèóÔ∏è Running new Drupal container..."
            docker run -d \
              --name drupal \
              -p 80:80 \
              --restart unless-stopped \
              -v /mnt/drupal-data/modules:/var/www/html/web/modules/custom \
              -v /mnt/drupal-data/themes:/var/www/html/web/themes/custom \
              -v /mnt/drupal-data/files:/var/www/html/web/sites/default/files \
              -v /mnt/drupal-data/config:/var/www/html/web/config \
              -e DB_HOST="$DB_HOST" \
              -e DB_PORT="$DB_PORT" \
              -e DB_NAME="$DB_NAME" \
              -e DB_USER="$DB_USER" \
              -e DB_PASSWORD='$DB_PASSWORD' \
              -e AWS_REGION="$AWS_REGION" \
              $DOCKER_IMAGE || { echo "Failed to run Docker container"; exit 1; }

          

            echo "üîç Waiting for Drupal to fully initialize..."
            sleep 60

            echo "üîç Checking container status..."
            docker ps -a
            docker logs drupal || echo "No logs available"

            # echo "üîç Checking Drupal installation status..."
            # RETRY_COUNT=0
            # MAX_RETRIES=10
            # until [ \$RETRY_COUNT -ge \$MAX_RETRIES ]; do
            #   DRUSH_STATUS=\$(docker exec drupal vendor/bin/drush --root=/var/www/html/web status --fields=bootstrap --format=string 2>/dev/null)
            #   if [ "\$DRUSH_STATUS" = "Successful" ]; then
            #     echo "Drupal is fully installed and ready!"
            #     break
            #   fi
            #   echo "Drupal not ready yet, retrying in 10 seconds... (attempt \$((RETRY_COUNT+1))/\$MAX_RETRIES)"
            #   sleep 10
            #   RETRY_COUNT=\$((RETRY_COUNT+1))
            # done
            # if [ \$RETRY_COUNT -ge \$MAX_RETRIES ]; then
            #   echo "Error: Drupal failed to initialize after \$MAX_RETRIES attempts."
            #   docker logs drupal
            #   exit 1
            # fi

            echo "üîß Ensuring permissions inside the container..."
            docker exec drupal mkdir -p /var/www/html/web/config/sync
            docker exec drupal chown -R www-data:www-data /var/www/html/web/config
            docker exec drupal chmod -R 775 /var/www/html/web/config
            docker exec drupal chown -R www-data:www-data /var/www/html/web/sites/default/files
            docker exec drupal chmod -R 775 /var/www/html/web/sites/default/files

            echo "üîß Configuring Drupal to allow image uploads..."
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.status 1 -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.directory inline-images -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.max_size 2097152 -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web config-set filter.format.basic_html editor.image_upload.extensions "jpg,png,gif" -y
            docker exec drupal vendor/bin/drush --root=/var/www/html/web cr

            docker exec drupal vendor/bin/drush config:set field.field.node.Article.image_field file_directory 'inline-images'


            echo "‚úÖ Deployment completed!"
          EOF
          
 

      - name: üåê Output Site URL
        run: |
          echo "‚úÖ Site deployed at: http://$INSTANCE_IP"
          echo "üîê Admin Login: http://$INSTANCE_IP/user/login"
