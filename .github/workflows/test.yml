name: Test

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username for the Drupal site (e.g., jess)'
        required: true
        default: 'jess'

env:
  INSTANCE_NAME: "lightsail_19_test"  # e.g., from lightsail_${var.user_id}_${var.site_name}
  DOCKER_IMAGE: "jesstg/drupal-custom:latest"
  DB_HOST: "ls-b8b0bddca9b5f313e52ddba2652e47f2fd54a7d7.c43wcgu6gelw.us-east-1.rds.amazonaws.com"  # Replace with your database endpoint
  DB_PORT: "3306"  # Default MySQL port, adjust if different
  DB_NAME: "db-19-test"  # Replace with your master_database_name
  DB_USER: "user"
  DB_PASS: "L1T#Am#OZ#HF#3Du"  # Replace with your actual password from Secrets Manager
  AWS_REGION: "us-east-1"  # Replace with your region
  INSTANCE_IP: "52.204.237.32"  # Replace with your static IP

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Check and Update AWS CLI if Needed
      - name: Check and Update AWS CLI
        run: |
          # Check existing AWS CLI version
          if command -v aws &> /dev/null; then
            echo "AWS CLI already installed:"
            aws --version
          else
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
          fi
          # Optionally update if version is too old (e.g., < 2.0)
          AWS_VERSION=$(aws --version | awk '{print $1}' | cut -d/ -f2)
          if [[ "$AWS_VERSION" < "2.0" ]]; then
            echo "Updating AWS CLI to latest version..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
            aws --version
          fi

      # Step 3: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Debug Environment Variables
      - name: Debug Environment Variables
        run: |
          echo "INSTANCE_NAME: $INSTANCE_NAME"
          echo "DOCKER_IMAGE: $DOCKER_IMAGE"
          echo "DB_HOST: $DB_HOST"
          echo "DB_PORT: $DB_PORT"
          echo "DB_NAME: $DB_NAME"
          echo "DB_USER: $DB_USER"
          echo "DB_PASS: $DB_PASS"
          echo "AWS_REGION: $AWS_REGION"
          echo "INSTANCE_IP: $INSTANCE_IP"

      # Step 5: Set up SSH Key
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Add the SSH private key
          chmod 600 ~/.ssh/id_rsa  # Secure the private key
          ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts  # Add the instance to known_hosts to avoid SSH warnings

      # Step 6: Deploy Drupal Container on Lightsail
      - name: Deploy Drupal Container
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$INSTANCE_IP "bash -c '\
            sudo docker stop \$(sudo docker ps -q) || true && \
            sudo docker rm \$(sudo docker ps -aq) || true && \
            if ! mountpoint -q /var/www/html; then \
              sudo mkfs.ext4 /dev/xvdf && \
              sudo mkdir -p /var/www/html && \
              sudo mount /dev/xvdf /var/www/html && \
              echo \"/dev/xvdf /var/www/html ext4 defaults,nofail 0 2\" | sudo tee -a /etc/fstab; \
            fi && \
            sudo mkdir -p /var/www/html/config /var/www/html/sites/default/files && \
            sudo chown -R 33:33 /var/www/html/config /var/www/html/sites/default/files && \
            sudo chmod -R 775 /var/www/html/config /var/www/html/sites/default/files && \
            sudo docker pull $DOCKER_IMAGE && \
            sudo docker run -d -p 80:80 \
              -v /var/www/html/config:/var/www/html/config \
              -v /var/www/html/sites/default/files:/var/www/html/sites/default/files \
              -e DRUPAL_DB_HOST=\"$DB_HOST\" \
              -e DRUPAL_DB_PORT=\"$DB_PORT\" \
              -e DRUPAL_DB_NAME=\"$DB_NAME\" \
              -e DRUPAL_DB_USER=\"$DB_USER\" \
              -e DRUPAL_DB_PASS=\"$DB_PASS\" \
              --name drupal \
              $DOCKER_IMAGE && \
            sleep 10 && \
            sudo docker exec drupal /var/www/html/vendor/bin/drush site-install standard \
              --db-url=\"mysql://$DB_USER:$DB_PASS@$DB_HOST:$DB_PORT/$DB_NAME\" \
              --account-name=admin \
              --account-pass=admin123 \
              --site-name=\"Drupal Site for ${{ github.event.inputs.username }}\" -y'"

      # Step 7: Check Container Logs
      - name: Check Container Logs
        run: |
          sleep 60
          ssh -i ~/.ssh/id_rsa ubuntu@$INSTANCE_IP "sudo docker logs drupal"

      # Step 8: Output URL
      - name: Output URL
        run: |
          echo "Site deployed! URL: http://$INSTANCE_IP"
          echo "Admin login: http://$INSTANCE_IP/user/login (admin/admin123)"
